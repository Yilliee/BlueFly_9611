# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the BlueFly branch
  push:
    branches: [ BlueFly_A12 ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Install requirements
      - name: Prepare
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install \
          bison build-essential curl flex git gnupg gperf \
          liblz4-tool libncurses5-dev libsdl1.2-dev libxml2 \
          libxml2-utils lzop pngcrush schedtool \
          squashfs-tools xsltproc zip zlib1g-dev \
          build-essential kernel-package libncurses5-dev \
          bzip2 git python \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y

      # Clone toolchain
      - name: Clone toolchain
        run: |
          cd ~
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b ndk-release-r18 toolchain --depth=1
          mkdir clang && wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/android-9.0.0_r6/clang-4639204.tar.gz && tar -xzvf *.tar.gz -C clang && rm *.tar.gz

      # Clone source
      - name: Clone source
        run: |
          cd ~
          git clone https://github.com/${GITHUB_REPOSITORY} kernel --depth=1

      # Build!
      - name: Build!
        run: |
          cd ~/kernel
          export ARCH=arm64
          make clean && make mrproper
          make bluefly-a51_defconfig O=a51
          make bluefly-m21_defconfig O=m21
          make bluefly-m31s_defconfig O=m31s
          make -j$(nproc --all) CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android- CC=$HOME/clang/bin/clang CLANG_TRIPLE=aarch64-linux-gnu- O=a51
          make -j$(nproc --all) CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android- CC=$HOME/clang/bin/clang CLANG_TRIPLE=aarch64-linux-gnu- O=m21
          make -j$(nproc --all) CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android- CC=$HOME/clang/bin/clang CLANG_TRIPLE=aarch64-linux-gnu- O=m31s

      # Create dtb(o) cfg
      - name: Build dtbo & add CFG entry
        run: |
          cd ~/kernel
          python scripts/mkdtboimg.py cfg_create dtb cfgs/exynos9610.cfg --dtb-dir a51/arch/arm64/boot/dts/exynos/
          python scripts/mkdtboimg.py cfg_create dtbo-a51.img cfgs/a51.cfg --dtb-dir a51/arch/arm64/boot/dts/samsung/
          python scripts/mkdtboimg.py cfg_create dtbo-m21.img cfgs/m21.cfg --dtb-dir m21/arch/arm64/boot/dts/samsung/
          python scripts/mkdtboimg.py cfg_create dtbo-m31s.img cfgs/m31s.cfg --dtb-dir m31s/arch/arm64/boot/dts/samsung/

      # AnyKernel time
      - name: Pack
        run: |
          ZIPNAME1="BlueFly_3.0_a51.zip"
          ZIPNAME2="BlueFly_3.0_m21.zip"
          ZIPNAME2="BlueFly_3.0_m31s.zip"
          cd ~
          git clone https://github.com/Yilliee/KernelFlasher -b Standard && cd KernelFlasher
          sed -i "s/{printl1txt}/BlueFly 3.0 DeadBeat/g" META-INF/com/google/android/update-binary
          sed -i "s/{printl2txt}/Originally by : @hendralize/g" META-INF/com/google/android/update-binary
          sed -i "s/{printl1txt}/Revived by Yilli√©/g" META-INF/com/google/android/update-binary
          cp ~/kernel/a51/arch/arm64/boot/Image .
          cp ~/kernel/dtb .
          cp ~/kernel/dtbo-a51.img dtbo
          zip -r9 $ZIPNAME1 * -x .git README.md *.zip
          cp ~/kernel/m21/arch/arm64/boot/Image .
          cp ~/kernel/dtbo-m21.img dtbo
          zip -r9 $ZIPNAME2 * -x .git README.md *.zip
          cp ~/kernel/m31s/arch/arm64/boot/Image .
          cp ~/kernel/dtbo-m31s.img dtbo
          zip -r9 $ZIPNAME3 * -x .git README.md *.zip

      # Upload to releases
      - name: Upload
        run: |
          curl -sL https://git.io/file-transfer | sh
          ./transfer wet ~/KernelFlasher/*.zip

