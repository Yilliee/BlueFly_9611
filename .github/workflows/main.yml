# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the BlueFly branch
  push:
    branches: [ BlueFly ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      # Install requirements
      - name: Prepare
        run: |
          sudo apt-get update
          sudo DEBIAN_FRONTEND=noninteractive apt-get install \
          bison build-essential curl flex git gnupg gperf \
          liblz4-tool libncurses5-dev libsdl1.2-dev libxml2 \
          libxml2-utils lzop pngcrush schedtool \
          squashfs-tools xsltproc zip zlib1g-dev \
          build-essential kernel-package libncurses5-dev \
          bzip2 git python \
          gcc-aarch64-linux-gnu g++-aarch64-linux-gnu -y

      # Clone toolchain
      - name: Clone toolchain
        run: |
          cd ~
          git clone https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b ndk-release-r18 toolchain --depth=1
          mkdir clang && wget https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/android-9.0.0_r6/clang-4639204.tar.gz && tar -xzvf *.tar.gz -C clang && rm *.tar.gz

      # Clone source
      - name: Clone source
        run: |
          cd ~
          git clone https://github.com/${GITHUB_REPOSITORY} kernel --depth=1

      # Build!
      - name: Build!
        run: |
          cd ~/kernel
          export ARCH=arm64
          make clean && make mrproper
          make bluefly_a51_defconfig O=a51
          make bluefly_m31_defconfig O=m31
          make -j$(nproc --all) CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android- CC=$HOME/clang/bin/clang CLANG_TRIPLE=aarch64-linux-gnu- O=a51
          make -j$(nproc --all) CROSS_COMPILE=$HOME/toolchain/bin/aarch64-linux-android- CC=$HOME/clang/bin/clang CLANG_TRIPLE=aarch64-linux-gnu- O=m31

      # Create dtb(o) cfg
      - name: Build dtbo & add CFG entry
        run: |
          cd ~/kernel
          cp a51/arch/arm64/boot/dts/exynos/exynos9610.dtb . # use a51 for dtb, but basically same
          python scripts/mkdtboimg.py create dtbo-m31.img m31/arch/arm64/boot/dts/samsung/*.dtbo
          python scripts/mkdtboimg.py create dtbo-a51.img a51/arch/arm64/boot/dts/samsung/*.dtbo
          python scripts/mkdtboimg.py cfg_create dtb dtbcfg/exynos9610.cfg --dtb-dir a51/arch/arm64/boot/dts/exynos/
          python scripts/mkdtboimg.py cfg_create dtbo-a51.img dtbcfg/a51.cfg --dtb-dir a51/arch/arm64/boot/dts/samsung/
          python scripts/mkdtboimg.py cfg_create dtbo-m31.img dtbcfg/m31.cfg --dtb-dir m31/arch/arm64/boot/dts/samsung/

      # Create img
      - name: Create image
        run: |
          cd ~
          git clone https://github.com/hendramanu/AIK-Linux AIK && cd AIK
          git checkout a51
          ./unpackimg.sh boot.img
          cd split_img
          cp ~/kernel/a51/arch/arm64/boot/Image boot.img-zImage
          cp ~/kernel/dtb boot.img-dtb
          cd .. && ./repackimg.sh
          mv image-new.img BlueFly_1.0_a51.img

          ./unpackimg.sh boot.img
          cd split_img
          cp ~/kernel/m31/arch/arm64/boot/Image boot.img-zImage
          cp ~/kernel/dtb boot.img-dtb
          cd .. && ./repackimg.sh
          mv image-new.img BlueFly_1.0_m31.img

          cp ~/kernel/dtbo-* .

      # Upload to TG
      - name: Upload
        env:
          CHAT_ID: ${{ secrets.CHAT_ID }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }} 
        run: |
          cd ~/AIK
          for i in BlueFly*.img dtbo*.img; do
          curl -F chat_id=$CHAT_ID -F document=@$i -F parse_mode=markdown https://api.telegram.org/bot$BOT_TOKEN/sendDocument
          done
